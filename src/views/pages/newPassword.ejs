<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Reset Password - WEARiT</title>
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
            rel="stylesheet"
        />
        <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css"
        />
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
        <style>
            :root {
                --primary-color: #000;
                --secondary-color: #f8f9fa;
                --accent-color: #6c757d;
                --text-dark: #212529;
                --text-light: #6c757d;
                --border-color: #e9ecef;
                --shadow-light: 0 2px 10px rgba(0, 0, 0, 0.05);
                --shadow-medium: 0 4px 20px rgba(0, 0, 0, 0.1);
                --shadow-heavy: 0 8px 30px rgba(0, 0, 0, 0.15);
                --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            }

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: "Inter", sans-serif;
                background: #f8f9fa;
                min-height: 100vh;
                overflow-x: hidden;
            }

            .auth-container {
                min-height: 100vh;
                display: flex;
            }

            .auth-image-section {
                flex: 1;
                background: var(--gradient-primary);
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                overflow: hidden;
            }

            .auth-image-section::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.4);
                z-index: 1;
            }

            .auth-image-section::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="white" opacity="0.05"><circle cx="50" cy="50" r="2"/><circle cx="20" cy="20" r="1"/><circle cx="80" cy="20" r="1"/><circle cx="20" cy="80" r="1"/><circle cx="80" cy="80" r="1"/></svg>');
                background-size: 50px 50px;
                z-index: 1;
            }

            .auth-image {
                width: 100%;
                height: 100%;
                object-fit: cover;
                position: absolute;
                top: 0;
                left: 0;
            }

            .auth-image-content {
                position: relative;
                z-index: 2;
                text-align: center;
                color: white;
                padding: 2rem;
                max-width: 500px;
            }

            .auth-image-title {
                font-size: 3rem;
                font-weight: 800;
                margin-bottom: 1rem;
                letter-spacing: -0.02em;
            }

            .auth-image-subtitle {
                font-size: 1.2rem;
                opacity: 0.9;
                line-height: 1.6;
            }

            .auth-form-section {
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 2rem;
                background: white;
                overflow-y: auto;
            }

            .auth-form-container {
                width: 100%;
                max-width: 500px;
                padding: 1rem 0;
            }

            .brand-logo {
                text-align: center;
                margin-bottom: 1.5rem;
            }

            .brand-name {
                font-size: 2.5rem;
                font-weight: 800;
                color: var(--text-dark);
                margin-bottom: 0.5rem;
                letter-spacing: -0.02em;
            }

            .brand-tagline {
                font-size: 0.9rem;
                color: var(--text-light);
                margin-bottom: 0;
            }

            .auth-header {
                text-align: center;
                margin-bottom: 1.5rem;
            }

            .auth-title {
                font-size: 2rem;
                font-weight: 700;
                color: var(--text-dark);
                margin-bottom: 0.5rem;
                letter-spacing: -0.01em;
            }

            .auth-subtitle {
                font-size: 1rem;
                color: var(--text-light);
                margin-bottom: 0;
                line-height: 1.5;
            }

            .form-group {
                margin-bottom: 1.25rem;
            }

            .form-label {
                font-size: 0.9rem;
                font-weight: 600;
                color: var(--text-dark);
                margin-bottom: 0.5rem;
                display: block;
            }

            .input-group {
                border-radius: 12px;
                overflow: hidden;
                box-shadow: var(--shadow-light);
                transition: all 0.3s ease;
                border: 1px solid var(--border-color);
            }

            .input-group:focus-within {
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
                border-color: var(--primary-color);
                transform: translateY(-2px);
                transition: all 0.3s ease;
            }

            .input-group:hover {
                transform: translateY(-1px);
                box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
            }

            .input-group-text {
                background-color: #f8f9fa;
                border: none;
                color: var(--text-light);
                padding: 0.75rem 0.875rem;
                font-size: 0.95rem;
            }

            .form-control {
                border: none;
                padding: 0.75rem 0.875rem;
                font-size: 0.95rem;
                background-color: white;
                transition: all 0.3s ease;
            }

            .form-control:focus {
                border: none;
                box-shadow: none;
                background-color: white;
            }

            .form-control::placeholder {
                color: #9ca3af;
                font-weight: 400;
            }

            .password-toggle {
                background-color: #f8f9fa;
                border: none;
                cursor: pointer;
                padding: 0.75rem 0.875rem;
                transition: all 0.3s ease;
                color: var(--text-light);
            }

            .password-toggle:hover {
                background-color: #e9ecef;
                color: var(--text-dark);
            }

            .auth-btn {
                width: 100%;
                padding: 0.875rem 1.5rem;
                font-size: 1rem;
                font-weight: 600;
                border-radius: 12px;
                border: none;
                background: var(--primary-color);
                color: white;
                transition: all 0.3s ease;
                margin-bottom: 1.5rem;
                position: relative;
                overflow: hidden;
            }

            .auth-btn:hover:not(:disabled) {
                background: #333;
                transform: translateY(-2px);
                box-shadow: var(--shadow-heavy);
            }

            .auth-btn:active {
                transform: translateY(0);
            }

            .auth-btn:disabled {
                opacity: 0.7;
                cursor: not-allowed;
                transform: none;
                position: relative;
                overflow: hidden;
            }

            .auth-btn:disabled::after {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                animation: shimmer 1.5s infinite;
            }

            @keyframes shimmer {
                0% { left: -100%; }
                100% { left: 100%; }
            }

            .btn-spinner {
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .auth-link {
                text-align: center;
                margin-top: 1rem;
            }

            .auth-link p {
                font-size: 0.9rem;
                color: var(--text-light);
                margin-bottom: 0;
            }

            .auth-link a {
                color: var(--primary-color);
                text-decoration: none;
                font-weight: 600;
                transition: color 0.3s ease;
            }

            .auth-link a:hover {
                color: var(--text-dark);
                text-decoration: underline;
            }

            .invalid-feedback {
                display: none !important;
                width: 100%;
                margin-top: 0.5rem;
                font-size: 0.8rem;
                color: #dc2626;
                font-weight: 500;
                padding: 0.75rem 1rem;
                background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
                border: 1px solid #fecaca;
                border-radius: 10px;
                position: relative;
                overflow: hidden;
                box-shadow: 0 2px 8px rgba(220, 38, 38, 0.1);
            }

            .invalid-feedback::before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                bottom: 0;
                width: 4px;
                background: linear-gradient(180deg, #dc2626 0%, #ef4444 100%);
                border-radius: 0 2px 2px 0;
            }

            .invalid-feedback.show {
                display: block !important;
                animation: slideInDown 0.4s ease;
            }

            @keyframes slideInDown {
                from {
                    opacity: 0;
                    transform: translateY(-15px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .form-control.is-invalid {
                border-color: #ef4444;
                background-image: none;
            }

            .form-control.is-valid {
                border-color: #10b981;
                background-image: none;
            }

            .input-group.is-invalid {
                border-color: #ef4444;
                box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
            }

            .input-group.is-valid {
                border-color: #10b981;
                box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
            }

            .password-strength {
                margin-top: 0.75rem;
                padding: 0.75rem;
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                border-radius: 10px;
                border: 1px solid #e9ecef;
            }

            .progress {
                height: 6px;
                border-radius: 3px;
                background-color: #f3f4f6;
                overflow: hidden;
                box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
            }

            .progress-bar {
                border-radius: 3px;
                transition: all 0.5s ease;
                position: relative;
                overflow: hidden;
            }

            .progress-bar::after {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
                animation: progressShimmer 2s infinite;
            }

            @keyframes progressShimmer {
                0% { left: -100%; }
                100% { left: 100%; }
            }

            .password-strength small {
                font-weight: 500;
                margin-top: 0.5rem;
                display: block;
                transition: color 0.3s ease;
            }

            .alert {
                border-radius: 12px;
                margin-bottom: 1.5rem;
                border: none;
                padding: 1rem 1.25rem;
                font-weight: 500;
            }

            .alert-success {
                background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
                color: #166534;
                border-left: 4px solid #22c55e;
            }

            .alert-danger {
                background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
                color: #dc2626;
                border-left: 4px solid #ef4444;
            }

            @media (max-width: 768px) {
                .auth-container {
                    flex-direction: column;
                }

                .auth-image-section {
                    min-height: 35vh;
                    flex: none;
                }

                .auth-image-title {
                    font-size: 2rem;
                }

                .auth-image-subtitle {
                    font-size: 1rem;
                }

                .auth-form-section {
                    padding: 1.5rem;
                }

                .brand-name {
                    font-size: 2rem;
                }

                .auth-title {
                    font-size: 1.5rem;
                }

                .form-group {
                    margin-bottom: 1rem;
                }
            }

            @media (max-width: 576px) {
                .auth-image-section {
                    min-height: 25vh;
                }

                .auth-form-section {
                    padding: 1rem;
                }

                .auth-image-content {
                    padding: 1rem;
                }

                .auth-image-title {
                    font-size: 1.75rem;
                }

                .brand-name {
                    font-size: 1.75rem;
                }

                .auth-title {
                    font-size: 1.25rem;
                }

                .brand-logo {
                    margin-bottom: 1rem;
                }

                .auth-header {
                    margin-bottom: 1rem;
                }
            }

            .d-none {
                display: none !important;
            }

            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(30px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            @keyframes fadeInLeft {
                from {
                    opacity: 0;
                    transform: translateX(-30px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }

            @keyframes fadeInRight {
                from {
                    opacity: 0;
                    transform: translateX(30px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }

            @keyframes modernShake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-3px); }
                75% { transform: translateX(3px); }
            }

            .auth-image-content {
                animation: fadeInLeft 1s ease-out;
            }

            .auth-form-container {
                animation: fadeInRight 1s ease-out;
            }

            .form-group {
                animation: fadeInUp 0.5s ease-out;
                animation-fill-mode: both;
            }

            .form-group:nth-child(1) { animation-delay: 0.1s; }
            .form-group:nth-child(2) { animation-delay: 0.15s; }
            .form-group:nth-child(3) { animation-delay: 0.2s; }
            .form-group:nth-child(4) { animation-delay: 0.25s; }

            .auth-btn {
                animation: fadeInUp 0.5s ease-out 0.3s both;
            }

            .auth-link {
                animation: fadeInUp 0.5s ease-out 0.35s both;
            }
        </style>
    </head>
    <body>
        <div class="auth-container">
            <!-- Left Image Section -->
            <div class="auth-image-section">
                <img src="/images/front.png" alt="WEARiT Fashion" class="auth-image" 
                     onerror="this.style.display='none'; this.parentElement.style.background='var(--gradient-primary)';">
                <div class="auth-image-content">
                    <h1 class="auth-image-title">New Password</h1>
                    <p class="auth-image-subtitle">
                        You're almost there! Create a strong, secure password to protect your account and complete the reset process.
                    </p>
                </div>
            </div>

            <!-- Right Form Section -->
            <div class="auth-form-section">
                <div class="auth-form-container">
                    <div class="brand-logo">
                        <h1 class="brand-name">WEARiT</h1>
                        <p class="brand-tagline">Fashion that speaks your style</p>
                    </div>
                    
                    <div class="auth-header">
                        <h4 class="auth-title">Reset Your Password</h4>
                        <p class="auth-subtitle">Enter the OTP sent to your email and create a new password</p>
                    </div>

                    <!-- Flash Messages -->
                    <% if (typeof messages !== 'undefined' && messages.success_msg && messages.success_msg.length > 0) { %>
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i><%= messages.success_msg[0] %>
                        </div>
                    <% } %>

                    <% if (typeof messages !== 'undefined' && messages.error_msg && messages.error_msg.length > 0) { %>
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i><%= messages.error_msg[0] %>
                        </div>
                    <% } %>

                    <% if (typeof messages !== 'undefined' && messages.error && messages.error.length > 0) { %>
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i><%= messages.error[0] %>
                        </div>
                    <% } %>

                    <form action="/resetpassword" method="POST" id="resetPasswordForm" novalidate>
                        <!-- OTP -->
                        <div class="form-group">
                            <label for="otp" class="form-label">Enter OTP</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-shield-lock"></i>
                                </span>
                                <input
                                    type="text"
                                    class="form-control <%= typeof validationErrors !== 'undefined' && validationErrors.otp ? 'is-invalid' : '' %>"
                                    id="otp"
                                    name="otp"
                                    placeholder="Enter 6-digit OTP"
                                    value="<%= typeof formData !== 'undefined' && formData.otp ? formData.otp : '' %>"
                                    maxlength="6"
                                    pattern="[0-9]{6}"
                                    inputmode="numeric"
                                    required
                                    aria-describedby="otpError"
                                />
                            </div>
                            <% if (typeof validationErrors !== 'undefined' && validationErrors.otp) { %>
                                <div class="invalid-feedback show" id="otpError"><%= validationErrors.otp %></div>
                            <% } else { %>
                                <div class="invalid-feedback" id="otpError"></div>
                            <% } %>
                        </div>

                        <!-- New Password -->
                        <div class="form-group">
                            <label for="newPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <input
                                    type="password"
                                    class="form-control <%= typeof validationErrors !== 'undefined' && validationErrors.newPassword ? 'is-invalid' : '' %>"
                                    id="newPassword"
                                    name="newPassword"
                                    placeholder="Enter new password"
                                    required
                                    aria-describedby="newPasswordError passwordStrength"
                                    autocomplete="new-password"
                                />
                                <button type="button" class="password-toggle" id="toggleNewPassword" aria-label="Show password">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <% if (typeof validationErrors !== 'undefined' && validationErrors.newPassword) { %>
                                <div class="invalid-feedback show" id="newPasswordError"><%= validationErrors.newPassword %></div>
                            <% } else { %>
                                <div class="invalid-feedback" id="newPasswordError"></div>
                            <% } %>
                            <div class="password-strength d-none" id="passwordStrength" aria-live="polite">
                                <div class="progress">
                                    <div class="progress-bar" id="passwordStrengthBar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                                <small class="text-muted" id="passwordStrengthText">Password strength</small>
                            </div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="form-group">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-shield-check"></i>
                                </span>
                                <input
                                    type="password"
                                    class="form-control <%= typeof validationErrors !== 'undefined' && validationErrors.confirmPassword ? 'is-invalid' : '' %>"
                                    id="confirmPassword"
                                    name="confirmPassword"
                                    placeholder="Confirm your password"
                                    required
                                    aria-describedby="confirmPasswordError"
                                    autocomplete="new-password"
                                />
                                <button type="button" class="password-toggle" id="toggleConfirmPassword" aria-label="Show confirm password">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <% if (typeof validationErrors !== 'undefined' && validationErrors.confirmPassword) { %>
                                <div class="invalid-feedback show" id="confirmPasswordError"><%= validationErrors.confirmPassword %></div>
                            <% } else { %>
                                <div class="invalid-feedback" id="confirmPasswordError"></div>
                            <% } %>
                        </div>

                        <button type="submit" class="auth-btn" id="submitBtn">
                            <span class="btn-text">Reset Password</span>
                            <span class="btn-spinner d-none">
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                Resetting...
                            </span>
                        </button>
                    </form>

                    <div class="auth-link">
                        <p><a href="/login">
                            <i class="bi bi-arrow-left me-1"></i>Back to Login
                        </a></p>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.getElementById('resetPasswordForm');
                const otpInput = document.getElementById('otp');
                const newPasswordInput = document.getElementById('newPassword');
                const confirmPasswordInput = document.getElementById('confirmPassword');
                const submitBtn = document.getElementById('submitBtn');
                const btnText = submitBtn.querySelector('.btn-text');
                const btnSpinner = submitBtn.querySelector('.btn-spinner');

                const otpError = document.getElementById('otpError');
                const newPasswordError = document.getElementById('newPasswordError');
                const confirmPasswordError = document.getElementById('confirmPasswordError');

                const passwordStrength = document.getElementById('passwordStrength');
                const passwordStrengthBar = document.getElementById('passwordStrengthBar');
                const passwordStrengthText = document.getElementById('passwordStrengthText');

                const toggleNewPassword = document.getElementById('toggleNewPassword');
                const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');

                let formSubmitted = false;

                function validateOTP() {
                    const otp = otpInput.value.trim();

                    if (!otp) {
                        if (formSubmitted) {
                            showFieldError(otpInput, otpError, 'OTP is required');
                        }
                        return false;
                    }

                    if (!/^\d{6}$/.test(otp)) {
                        if (formSubmitted) {
                            showFieldError(otpInput, otpError, 'OTP must be a 6-digit number');
                        }
                        return false;
                    }

                    hideFieldError(otpInput, otpError);
                    return true;
                }

                function validateNewPassword() {
                    const password = newPasswordInput.value;

                    if (!password) {
                        if (formSubmitted) {
                            showFieldError(newPasswordInput, newPasswordError, 'New password is required');
                        }
                        passwordStrength.classList.add('d-none');
                        return false;
                    }

                    if (password.length < 8) {
                        if (formSubmitted) {
                            showFieldError(newPasswordInput, newPasswordError, 'Password must be at least 8 characters long');
                        }
                        return false;
                    }

                    const strength = checkPasswordStrength(password);
                    updatePasswordStrengthIndicator(strength);

                    if (strength.score < 2) {
                        if (formSubmitted) {
                            showFieldError(newPasswordInput, newPasswordError, 'Password is too weak. ' + strength.message);
                        }
                        return false;
                    }

                    hideFieldError(newPasswordInput, newPasswordError);
                    return true;
                }

                function validateConfirmPassword() {
                    const password = newPasswordInput.value;
                    const confirmPassword = confirmPasswordInput.value;

                    if (!confirmPassword) {
                        if (formSubmitted) {
                            showFieldError(confirmPasswordInput, confirmPasswordError, 'Please confirm your new password');
                        }
                        return false;
                    }

                    if (password !== confirmPassword) {
                        if (formSubmitted) {
                            showFieldError(confirmPasswordInput, confirmPasswordError, 'Passwords do not match');
                        }
                        return false;
                    }

                    hideFieldError(confirmPasswordInput, confirmPasswordError);
                    return true;
                }

                function checkPasswordStrength(password) {
                    let score = 0;
                    let message = '';

                    if (password.length >= 8) score += 1;

                    if (/[A-Z]/.test(password)) score += 1; // Has uppercase
                    if (/[a-z]/.test(password)) score += 1; // Has lowercase
                    if (/[0-9]/.test(password)) score += 1; // Has number
                    if (/[^A-Za-z0-9]/.test(password)) score += 1; // Has special char

                    if (score < 2) {
                        message = 'Very weak - Use a longer password with mixed characters';
                    } else if (score < 3) {
                        message = 'Weak - Add numbers or special characters';
                    } else if (score < 4) {
                        message = 'Medium - Add more variety of characters';
                    } else if (score < 5) {
                        message = 'Strong - Good password';
                    } else {
                        message = 'Very strong - Excellent password';
                    }

                    return { score, message };
                }

                function updatePasswordStrengthIndicator(strength) {
                    passwordStrength.classList.remove('d-none');

                    passwordStrengthBar.style.transition = 'width 0.5s ease, background-color 0.3s ease'
                    passwordStrengthBar.style.width = `${(strength.score / 5) * 100}%`;

                    if (strength.score < 2) {
                        passwordStrengthBar.style.backgroundColor = '#ef4444'
                        passwordStrengthText.style.color = '#ef4444'
                    } else if (strength.score < 3) {
                        passwordStrengthBar.style.backgroundColor = '#f59e0b'
                        passwordStrengthText.style.color = '#f59e0b'
                    } else if (strength.score < 4) {
                        passwordStrengthBar.style.backgroundColor = '#3b82f6'
                        passwordStrengthText.style.color = '#3b82f6'
                    } else {
                        passwordStrengthBar.style.backgroundColor = '#10b981'
                        passwordStrengthText.style.color = '#10b981'
                    }

                    passwordStrengthText.style.transition = 'color 0.3s ease'
                    passwordStrengthText.textContent = strength.message;

                    passwordStrengthBar.style.animation = 'strengthPulse 0.3s ease'
                    setTimeout(() => {
                        passwordStrengthBar.style.animation = ''
                    }, 300)
                }

                function showFieldError(input, errorElement, message) {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');

                    const inputGroup = input.closest('.input-group')
                    if (inputGroup) {
                      inputGroup.style.borderColor = '#ef4444'
                      inputGroup.style.boxShadow = '0 0 0 3px rgba(239, 68, 68, 0.1)'
                    }

                    errorElement.textContent = message;
                    errorElement.style.display = 'block';
                    errorElement.classList.add('show');

                    errorElement.style.opacity = '0'
                    errorElement.style.transform = 'translateY(-10px)'
                    setTimeout(() => {
                      errorElement.style.transition = 'all 0.3s ease'
                      errorElement.style.opacity = '1'
                      errorElement.style.transform = 'translateY(0)'
                    }, 10)

                    input.style.animation = "modernShake 0.4s ease-in-out"
                    setTimeout(() => {
                      input.style.animation = ""
                    }, 400)
                }

                function hideFieldError(input, errorElement) {
                    input.classList.remove('is-invalid');
                    input.classList.add('is-valid');

                    const inputGroup = input.closest('.input-group')
                    if (inputGroup) {
                      inputGroup.style.borderColor = '#198754'
                      inputGroup.style.boxShadow = '0 0 0 3px rgba(25, 135, 84, 0.1)'

                      setTimeout(() => {
                        inputGroup.style.borderColor = ''
                        inputGroup.style.boxShadow = ''
                      }, 2000)
                    }

                    errorElement.style.transition = 'all 0.3s ease'
                    errorElement.style.opacity = '0'
                    errorElement.style.transform = 'translateY(-10px)'

                    setTimeout(() => {
                      errorElement.textContent = ""
                      errorElement.style.display = "none"
                      errorElement.classList.remove("show")
                      errorElement.style.transition = ''
                    }, 300)
                }

                function showLoadingState() {
                    submitBtn.disabled = true;
                    btnText.classList.add('d-none');
                    btnSpinner.classList.remove('d-none');
                }

                function hideLoadingState() {
                    submitBtn.disabled = false;
                    btnText.classList.remove('d-none');
                    btnSpinner.classList.add('d-none');
                }

                otpInput.addEventListener('input', function() {

                    this.value = this.value.replace(/[^0-9]/g, '');
                    if (this.value.trim()) {
                        validateOTP();
                    } else {
                        this.classList.remove('is-valid', 'is-invalid');
                        otpError.style.display = 'none';
                    }
                });

                otpInput.addEventListener('blur', function() {
                    if (this.value.trim()) {
                        validateOTP();
                    }
                });

                newPasswordInput.addEventListener('input', function() {
                    if (this.value) {
                        validateNewPassword();
                        if (confirmPasswordInput.value) {
                            validateConfirmPassword();
                        }
                    } else {
                        this.classList.remove('is-valid', 'is-invalid');
                        newPasswordError.style.display = 'none';
                        passwordStrength.classList.add('d-none');
                    }
                });

                newPasswordInput.addEventListener('blur', function() {
                    if (this.value) {
                        validateNewPassword();
                    }
                });

                confirmPasswordInput.addEventListener('input', function() {
                    if (this.value) {
                        validateConfirmPassword();
                    } else {
                        this.classList.remove('is-valid', 'is-invalid');
                        confirmPasswordError.style.display = 'none';
                    }
                });

                confirmPasswordInput.addEventListener('blur', function() {
                    if (this.value) {
                        validateConfirmPassword();
                    }
                });

                toggleNewPassword.addEventListener('click', function() {
                    const type = newPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    newPasswordInput.setAttribute('type', type);

                    const icon = this.querySelector('i');
                    if (type === 'password') {
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    } else {
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    }
                });

                toggleConfirmPassword.addEventListener('click', function() {
                    const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    confirmPasswordInput.setAttribute('type', type);

                    const icon = this.querySelector('i');
                    if (type === 'password') {
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    } else {
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    }
                });

                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    formSubmitted = true;

                    const otpValid = validateOTP();
                    const passwordValid = validateNewPassword();
                    const confirmPasswordValid = validateConfirmPassword();

                    if (!otpValid || !passwordValid || !confirmPasswordValid) {
                        const firstInvalidField = form.querySelector('.is-invalid');
                        if (firstInvalidField) {
                            firstInvalidField.focus();
                        }
                        return;
                    }

                    showLoadingState();

                    const formData = new FormData(form);

                    fetch('/resetpassword', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.redirected) {
                            window.location.href = response.url;
                            return;
                        }
                        return response.text();
                    })
                    .then(data => {
                        hideLoadingState();
                        if (typeof data === 'string') {

                            form.submit();
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        hideLoadingState();

                        Swal.fire({
                            icon: 'error',
                            title: 'Connection Error',
                            text: 'Unable to connect to the server. Please check your internet connection and try again.',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                });
            });
        </script>
    </body>
</html>
