<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Reset Password - WEARiT</title>
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
            rel="stylesheet"
        />
        <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css"
        />
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <style>
            body {
                font-family: "Inter", sans-serif;
                height: 100vh;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                display: flex;
                justify-content: center;
                align-items: center;
                margin: 0;
            }

            .card {
                max-width: 450px;
                width: 100%;
                padding: 40px;
                border-radius: 16px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                background: white;
                border: none;
            }

            .brand-logo {
                text-align: center;
                margin-bottom: 30px;
            }

            .brand-name {
                font-size: 32px;
                font-weight: 700;
                color: #333;
                margin: 0;
            }

            .brand-tagline {
                color: #666;
                font-size: 14px;
                margin: 5px 0 0 0;
            }

            .form-title {
                text-align: center;
                margin-bottom: 30px;
                color: #333;
                font-weight: 600;
            }

            .form-subtitle {
                text-align: center;
                color: #666;
                font-size: 14px;
                margin-bottom: 30px;
            }

            .form-control {
                border: 2px solid #e1e5e9;
                border-radius: 8px;
                padding: 12px 16px;
                font-size: 16px;
                transition: all 0.3s ease;
            }

            .form-control:focus {
                border-color: #667eea;
                box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            }

            .form-control.is-invalid {
                border-color: #dc3545;
                animation: shake 0.5s ease-in-out;
            }

            .form-control.is-valid {
                border-color: #28a745;
            }

            .input-group-text {
                background: #f8f9fa;
                border: 2px solid #e1e5e9;
                border-right: none;
                color: #666;
            }

            .input-group .form-control {
                border-left: none;
            }

            .input-group:focus-within .input-group-text {
                border-color: #667eea;
                background: #f0f2ff;
            }

            .password-toggle {
                background: #f8f9fa;
                border: 2px solid #e1e5e9;
                border-left: none;
                cursor: pointer;
                color: #666;
            }

            .btn-primary {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border: none;
                border-radius: 8px;
                padding: 12px 24px;
                font-weight: 600;
                font-size: 16px;
                transition: all 0.3s ease;
            }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            }

            .invalid-feedback {
                display: block;
                font-size: 14px;
                margin-top: 5px;
            }

            .back-link {
                text-align: center;
                margin-top: 20px;
            }

            .back-link a {
                color: #667eea;
                text-decoration: none;
                font-weight: 500;
            }

            .back-link a:hover {
                text-decoration: underline;
            }

            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
                20%, 40%, 60%, 80% { transform: translateX(5px); }
            }

            .alert {
                border-radius: 8px;
                margin-bottom: 20px;
            }

            .password-strength {
                margin-top: 8px;
            }

            .progress {
                height: 6px;
                border-radius: 3px;
            }
        </style>
    </head>
    <body>
        <div class="card">
            <div class="brand-logo">
                <h1 class="brand-name">WEARiT</h1>
                <p class="brand-tagline">Fashion that speaks your style</p>
            </div>

            <h4 class="form-title">Reset Your Password</h4>
            <p class="form-subtitle">Enter the OTP sent to your email and create a new password</p>

            <!-- Flash Messages -->
            <% if (typeof messages !== 'undefined' && messages.success_msg && messages.success_msg.length > 0) { %>
                <div class="alert alert-success">
                    <i class="bi bi-check-circle me-2"></i><%= messages.success_msg[0] %>
                </div>
            <% } %>
            
            <% if (typeof messages !== 'undefined' && messages.error_msg && messages.error_msg.length > 0) { %>
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i><%= messages.error_msg[0] %>
                </div>
            <% } %>

            <% if (typeof messages !== 'undefined' && messages.error && messages.error.length > 0) { %>
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i><%= messages.error[0] %>
                </div>
            <% } %>

            <form action="/resetpassword" method="POST" id="resetPasswordForm" novalidate>
                <!-- OTP -->
                <div class="mb-3">
                    <label for="otp" class="form-label">Enter OTP</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-shield-lock"></i>
                        </span>
                        <input
                            type="text"
                            class="form-control <%= typeof validationErrors !== 'undefined' && validationErrors.otp ? 'is-invalid' : '' %>"
                            id="otp"
                            name="otp"
                            placeholder="Enter 6-digit OTP"
                            value="<%= typeof formData !== 'undefined' && formData.otp ? formData.otp : '' %>"
                            maxlength="6"
                            pattern="[0-9]{6}"
                            inputmode="numeric"
                            required
                            aria-describedby="otpError"
                        />
                    </div>
                    <% if (typeof validationErrors !== 'undefined' && validationErrors.otp) { %>
                        <div class="invalid-feedback" id="otpError"><%= validationErrors.otp %></div>
                    <% } else { %>
                        <div class="invalid-feedback" id="otpError"></div>
                    <% } %>
                </div>

                <!-- New Password -->
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-lock"></i>
                        </span>
                        <input
                            type="password"
                            class="form-control <%= typeof validationErrors !== 'undefined' && validationErrors.newPassword ? 'is-invalid' : '' %>"
                            id="newPassword"
                            name="newPassword"
                            placeholder="Enter new password"
                            required
                            aria-describedby="newPasswordError passwordStrength"
                            autocomplete="new-password"
                        />
                        <button type="button" class="input-group-text password-toggle" id="toggleNewPassword" aria-label="Show password">
                            <i class="bi bi-eye-slash"></i>
                        </button>
                    </div>
                    <% if (typeof validationErrors !== 'undefined' && validationErrors.newPassword) { %>
                        <div class="invalid-feedback" id="newPasswordError"><%= validationErrors.newPassword %></div>
                    <% } else { %>
                        <div class="invalid-feedback" id="newPasswordError"></div>
                    <% } %>
                    <div class="password-strength mt-2 d-none" id="passwordStrength" aria-live="polite">
                        <div class="progress" style="height: 6px;">
                            <div class="progress-bar" id="passwordStrengthBar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <small class="text-muted" id="passwordStrengthText">Password strength</small>
                    </div>
                </div>

                <!-- Confirm Password -->
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-shield-check"></i>
                        </span>
                        <input
                            type="password"
                            class="form-control <%= typeof validationErrors !== 'undefined' && validationErrors.confirmPassword ? 'is-invalid' : '' %>"
                            id="confirmPassword"
                            name="confirmPassword"
                            placeholder="Confirm your password"
                            required
                            aria-describedby="confirmPasswordError"
                            autocomplete="new-password"
                        />
                        <button type="button" class="input-group-text password-toggle" id="toggleConfirmPassword" aria-label="Show confirm password">
                            <i class="bi bi-eye-slash"></i>
                        </button>
                    </div>
                    <% if (typeof validationErrors !== 'undefined' && validationErrors.confirmPassword) { %>
                        <div class="invalid-feedback" id="confirmPasswordError"><%= validationErrors.confirmPassword %></div>
                    <% } else { %>
                        <div class="invalid-feedback" id="confirmPasswordError"></div>
                    <% } %>
                </div>

                <button type="submit" class="btn btn-primary w-100" id="submitBtn">
                    <span class="btn-text">Reset Password</span>
                    <span class="btn-spinner d-none">
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Resetting...
                    </span>
                </button>
            </form>

            <div class="back-link">
                <a href="/login">
                    <i class="bi bi-arrow-left me-1"></i>Back to Login
                </a>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.getElementById('resetPasswordForm');
                const otpInput = document.getElementById('otp');
                const newPasswordInput = document.getElementById('newPassword');
                const confirmPasswordInput = document.getElementById('confirmPassword');
                const submitBtn = document.getElementById('submitBtn');
                const btnText = submitBtn.querySelector('.btn-text');
                const btnSpinner = submitBtn.querySelector('.btn-spinner');
                
                // Error elements
                const otpError = document.getElementById('otpError');
                const newPasswordError = document.getElementById('newPasswordError');
                const confirmPasswordError = document.getElementById('confirmPasswordError');
                
                // Password strength elements
                const passwordStrength = document.getElementById('passwordStrength');
                const passwordStrengthBar = document.getElementById('passwordStrengthBar');
                const passwordStrengthText = document.getElementById('passwordStrengthText');
                
                // Toggle buttons
                const toggleNewPassword = document.getElementById('toggleNewPassword');
                const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');

                // Validation functions
                function validateOTP() {
                    const otp = otpInput.value.trim();
                    
                    if (!otp) {
                        showFieldError(otpInput, otpError, 'OTP is required');
                        return false;
                    }
                    
                    if (!/^\d{6}$/.test(otp)) {
                        showFieldError(otpInput, otpError, 'OTP must be a 6-digit number');
                        return false;
                    }
                    
                    hideFieldError(otpInput, otpError);
                    return true;
                }

                function validateNewPassword() {
                    const password = newPasswordInput.value;
                    
                    if (!password) {
                        showFieldError(newPasswordInput, newPasswordError, 'New password is required');
                        passwordStrength.classList.add('d-none');
                        return false;
                    }
                    
                    if (password.length < 8) {
                        showFieldError(newPasswordInput, newPasswordError, 'Password must be at least 8 characters long');
                        return false;
                    }
                    
                    // Check password strength
                    const strength = checkPasswordStrength(password);
                    updatePasswordStrengthIndicator(strength);
                    
                    if (strength.score < 2) {
                        showFieldError(newPasswordInput, newPasswordError, 'Password is too weak. ' + strength.message);
                        return false;
                    }
                    
                    hideFieldError(newPasswordInput, newPasswordError);
                    return true;
                }

                function validateConfirmPassword() {
                    const password = newPasswordInput.value;
                    const confirmPassword = confirmPasswordInput.value;
                    
                    if (!confirmPassword) {
                        showFieldError(confirmPasswordInput, confirmPasswordError, 'Please confirm your new password');
                        return false;
                    }
                    
                    if (password !== confirmPassword) {
                        showFieldError(confirmPasswordInput, confirmPasswordError, 'Passwords do not match');
                        return false;
                    }
                    
                    hideFieldError(confirmPasswordInput, confirmPasswordError);
                    return true;
                }

                function checkPasswordStrength(password) {
                    let score = 0;
                    let message = '';

                    // Length check
                    if (password.length >= 8) score += 1;

                    // Complexity checks
                    if (/[A-Z]/.test(password)) score += 1; // Has uppercase
                    if (/[a-z]/.test(password)) score += 1; // Has lowercase
                    if (/[0-9]/.test(password)) score += 1; // Has number
                    if (/[^A-Za-z0-9]/.test(password)) score += 1; // Has special char

                    // Determine message based on score
                    if (score < 2) {
                        message = 'Very weak - Use a longer password with mixed characters';
                    } else if (score < 3) {
                        message = 'Weak - Add numbers or special characters';
                    } else if (score < 4) {
                        message = 'Medium - Add more variety of characters';
                    } else if (score < 5) {
                        message = 'Strong - Good password';
                    } else {
                        message = 'Very strong - Excellent password';
                    }

                    return { score, message };
                }

                function updatePasswordStrengthIndicator(strength) {
                    passwordStrength.classList.remove('d-none');

                    // Update progress bar
                    const percentage = (strength.score / 5) * 100;
                    passwordStrengthBar.style.width = `${percentage}%`;

                    // Update color based on strength
                    if (strength.score < 2) {
                        passwordStrengthBar.className = 'progress-bar bg-danger';
                    } else if (strength.score < 3) {
                        passwordStrengthBar.className = 'progress-bar bg-warning';
                    } else if (strength.score < 4) {
                        passwordStrengthBar.className = 'progress-bar bg-info';
                    } else {
                        passwordStrengthBar.className = 'progress-bar bg-success';
                    }

                    // Update text
                    passwordStrengthText.textContent = strength.message;
                }

                function showFieldError(input, errorElement, message) {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');
                    errorElement.textContent = message;
                    errorElement.style.display = 'block';
                }

                function hideFieldError(input, errorElement) {
                    input.classList.remove('is-invalid');
                    input.classList.add('is-valid');
                    errorElement.textContent = '';
                    errorElement.style.display = 'none';
                }

                function showLoadingState() {
                    submitBtn.disabled = true;
                    btnText.classList.add('d-none');
                    btnSpinner.classList.remove('d-none');
                }

                function hideLoadingState() {
                    submitBtn.disabled = false;
                    btnText.classList.remove('d-none');
                    btnSpinner.classList.add('d-none');
                }

                // Real-time validation
                otpInput.addEventListener('input', function() {
                    // Only allow numbers
                    this.value = this.value.replace(/[^0-9]/g, '');
                    if (this.value.trim()) {
                        validateOTP();
                    } else {
                        this.classList.remove('is-valid', 'is-invalid');
                        otpError.style.display = 'none';
                    }
                });

                otpInput.addEventListener('blur', validateOTP);

                newPasswordInput.addEventListener('input', function() {
                    if (this.value) {
                        validateNewPassword();
                        if (confirmPasswordInput.value) {
                            validateConfirmPassword();
                        }
                    } else {
                        this.classList.remove('is-valid', 'is-invalid');
                        newPasswordError.style.display = 'none';
                        passwordStrength.classList.add('d-none');
                    }
                });

                newPasswordInput.addEventListener('blur', validateNewPassword);

                confirmPasswordInput.addEventListener('input', function() {
                    if (this.value) {
                        validateConfirmPassword();
                    } else {
                        this.classList.remove('is-valid', 'is-invalid');
                        confirmPasswordError.style.display = 'none';
                    }
                });

                confirmPasswordInput.addEventListener('blur', validateConfirmPassword);

                // Password toggle functionality
                toggleNewPassword.addEventListener('click', function() {
                    const type = newPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    newPasswordInput.setAttribute('type', type);

                    const icon = this.querySelector('i');
                    if (type === 'password') {
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    } else {
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    }
                });

                toggleConfirmPassword.addEventListener('click', function() {
                    const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    confirmPasswordInput.setAttribute('type', type);

                    const icon = this.querySelector('i');
                    if (type === 'password') {
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    } else {
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    }
                });

                // Form submission
                form.addEventListener('submit', function(e) {
                    e.preventDefault();

                    const validations = [
                        validateOTP(),
                        validateNewPassword(),
                        validateConfirmPassword()
                    ];

                    const allValid = validations.every(Boolean);

                    if (!allValid) {
                        const firstInvalidField = form.querySelector('.is-invalid');
                        if (firstInvalidField) {
                            firstInvalidField.focus();
                        }
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please fix all errors before submitting the form.',
                            confirmButtonColor: '#dc3545'
                        });
                        return;
                    }

                    showLoadingState();

                    // FIXED: Use URLSearchParams instead of FormData
                    const formData = new URLSearchParams();
                    formData.append('otp', otpInput.value.trim());
                    formData.append('newPassword', newPasswordInput.value);
                    formData.append('confirmPassword', confirmPasswordInput.value);
                    
                    fetch('/resetpassword', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        hideLoadingState();
                        
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: data.message,
                                confirmButtonColor: '#667eea'
                            }).then(() => {
                                if (data.redirectUrl) {
                                    window.location.href = data.redirectUrl;
                                }
                            });
                        } else {
                            if (data.errors) {
                                Object.entries(data.errors).forEach(([field, message]) => {
                                    const input = document.getElementById(field);
                                    const errorElement = document.getElementById(field + 'Error');
                                    if (input && errorElement) {
                                        showFieldError(input, errorElement, message);
                                    }
                                });
                            }
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Something went wrong. Please try again.',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        hideLoadingState();
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Connection Error',
                            text: 'Unable to connect to the server. Please check your internet connection and try again.',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                });
            });
        </script>
    </body>
</html>
