<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Payment Failed - WEARIT</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="/css/style.css" />
  <link rel="stylesheet" href="/css/header.css" />
  <link rel="stylesheet" href="/css/footer.css" />
  <link rel="stylesheet" href="/css/order-flow.css" />
  <style>
    .failure-container {
      min-height: 80vh;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }
    
    .failure-card {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      padding: 3rem;
      max-width: 800px;
      width: 100%;
      margin: 2rem;
    }
    
    .failure-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #dc3545, #c82333);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 2rem;
      animation: pulse 2s infinite;
    }
    
    .failure-icon i {
      font-size: 2.5rem;
      color: white;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    .error-code {
      background: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 1rem;
      margin: 1.5rem 0;
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
    }
    
    .suggestions-list {
      background: #f8f9fa;
      border-left: 4px solid #007bff;
      padding: 1.5rem;
      margin: 1.5rem 0;
      border-radius: 0 8px 8px 0;
    }
    
    .suggestions-list ul {
      margin: 0;
      padding-left: 1.2rem;
    }
    
    .suggestions-list li {
      margin-bottom: 0.5rem;
      color: #495057;
    }
    
    .payment-options {
      background: #f8f9fa;
      border-radius: 12px;
      padding: 1.5rem;
      margin: 2rem 0;
    }
    
    .payment-option {
      background: white;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .payment-option:hover {
      border-color: #007bff;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,123,255,0.15);
    }
    
    .payment-option.disabled {
      opacity: 0.6;
      cursor: not-allowed;
      background: #f8f9fa;
    }
    
    .payment-option.disabled:hover {
      transform: none;
      box-shadow: none;
      border-color: #e9ecef;
    }
    
    .retry-btn {
      background: linear-gradient(135deg, #007bff, #0056b3);
      border: none;
      border-radius: 50px;
      padding: 1rem 2.5rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0,123,255,0.3);
    }
    
    .retry-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0,123,255,0.4);
    }
    
    .order-summary {
      background: #f8f9fa;
      border-radius: 12px;
      padding: 1.5rem;
      margin-top: 2rem;
    }
    
    .summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      padding: 0.25rem 0;
    }
    
    .summary-row.total {
      border-top: 2px solid #dee2e6;
      padding-top: 0.75rem;
      margin-top: 0.75rem;
      font-weight: 600;
      font-size: 1.1rem;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }
    
    .loading-content {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      text-align: center;
      max-width: 300px;
    }
  </style>
</head>
<body>
  <%- include('../partials/header') %>
  
  <div class="failure-container">
    <div class="failure-card">
      <!-- Failure Icon -->
      <div class="failure-icon">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      
      <!-- Main Error Message -->
      <div class="text-center mb-4">
        <h1 class="h2 text-danger mb-3">Payment Failed</h1>
        <p class="lead text-muted mb-0">
          <% if (typeof errorDetails !== 'undefined' && errorDetails.userMessage) { %>
            <%= errorDetails.userMessage %>
          <% } else { %>
            We couldn't process your payment. Please try again.
          <% } %>
        </p>
      </div>
      
      <!-- Order Information -->
      <div class="text-center mb-4">
        <p class="mb-1"><strong>Order ID:</strong> <%= order.orderID %></p>
        <p class="mb-0"><strong>Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %></p>
      </div>
      
      <!-- Error Details -->
      <% if (typeof errorDetails !== 'undefined' && errorDetails.code && errorDetails.code !== 'PAYMENT_FAILED') { %>
      <div class="error-code">
        <strong>Error Code:</strong> <%= errorDetails.code %><br>
        <% if (errorDetails.technicalMessage) { %>
        <strong>Details:</strong> <%= errorDetails.technicalMessage %>
        <% } %>
      </div>
      <% } %>
      
      <!-- Suggestions -->
      <% if (typeof errorDetails !== 'undefined' && errorDetails.suggestions && errorDetails.suggestions.length > 0) { %>
      <div class="suggestions-list">
        <h6 class="mb-3"><i class="fas fa-lightbulb text-warning me-2"></i>What you can try:</h6>
        <ul>
          <% errorDetails.suggestions.forEach(suggestion => { %>
          <li><%= suggestion %></li>
          <% }); %>
        </ul>
      </div>
      <% } %>
      
      <!-- Payment Options for Retry -->
      <% if (typeof errorDetails === 'undefined' || errorDetails.retryable !== false) { %>
      <div class="payment-options">
        <h5 class="mb-3">Choose a payment method to retry:</h5>
        
        <!-- Razorpay Option -->
        <div class="payment-option" data-method="razorpay">
          <div class="d-flex align-items-center">
            <i class="fas fa-credit-card text-primary me-3 fs-4"></i>
            <div>
              <h6 class="mb-1">Credit/Debit Card, UPI, Net Banking</h6>
              <small class="text-muted">Secure payment with Razorpay</small>
            </div>
          </div>
        </div>
        
        <!-- PayPal Option -->
        <div class="payment-option" data-method="paypal">
          <div class="d-flex align-items-center">
            <i class="fab fa-paypal text-primary me-3 fs-4"></i>
            <div>
              <h6 class="mb-1">PayPal</h6>
              <small class="text-muted">Pay securely with PayPal</small>
            </div>
          </div>
        </div>
        
        <!-- Wallet Option -->
        <% if (typeof paymentOptions !== 'undefined' && paymentOptions.hasWalletBalance) { %>
        <div class="payment-option" data-method="wallet">
          <div class="d-flex align-items-center">
            <i class="fas fa-wallet text-success me-3 fs-4"></i>
            <div>
              <h6 class="mb-1">Wallet Balance</h6>
              <small class="text-success">Available: ₹<%= paymentOptions.walletBalance.toFixed(2) %></small>
            </div>
          </div>
        </div>
        <% } else if (typeof paymentOptions !== 'undefined') { %>
        <div class="payment-option disabled">
          <div class="d-flex align-items-center">
            <i class="fas fa-wallet text-muted me-3 fs-4"></i>
            <div>
              <h6 class="mb-1 text-muted">Wallet Balance</h6>
              <small class="text-danger">Insufficient balance (₹<%= paymentOptions.walletBalance.toFixed(2) %> available)</small>
            </div>
          </div>
        </div>
        <% } %>
        
        <!-- COD Option -->
        <% if (typeof paymentOptions !== 'undefined' && paymentOptions.canUseCOD) { %>
        <div class="payment-option" data-method="COD">
          <div class="d-flex align-items-center">
            <i class="fas fa-money-bill-wave text-warning me-3 fs-4"></i>
            <div>
              <h6 class="mb-1">Cash on Delivery</h6>
              <small class="text-muted">Pay when you receive your order</small>
            </div>
          </div>
        </div>
        <% } else if (typeof paymentOptions !== 'undefined') { %>
        <div class="payment-option disabled">
          <div class="d-flex align-items-center">
            <i class="fas fa-money-bill-wave text-muted me-3 fs-4"></i>
            <div>
              <h6 class="mb-1 text-muted">Cash on Delivery</h6>
              <small class="text-danger">Not available for orders ₹1000 and above</small>
            </div>
          </div>
        </div>
        <% } %>
      </div>
      
      <!-- Action Buttons -->
      <div class="text-center mt-4">
        <button id="retryPaymentBtn" class="btn btn-primary retry-btn me-3" disabled>
          <i class="fas fa-redo me-2"></i>Retry Payment
        </button>
        <a href="/orders" class="btn btn-outline-secondary">
          <i class="fas fa-list me-2"></i>View Orders
        </a>
      </div>
      <% } else { %>
      <!-- Non-retryable error -->
      <div class="text-center mt-4">
        <p class="text-muted mb-3">This payment cannot be retried automatically. Please contact support for assistance.</p>
        <a href="/orders" class="btn btn-primary me-3">
          <i class="fas fa-list me-2"></i>View Orders
        </a>
        <a href="/contact" class="btn btn-outline-secondary">
          <i class="fas fa-headset me-2"></i>Contact Support
        </a>
      </div>
      <% } %>
      
      <!-- Order Summary -->
      <% if (typeof calculatedTotals !== 'undefined') { %>
      <div class="order-summary">
        <h6 class="mb-3">Order Summary</h6>
        <div class="summary-row">
          <span>Subtotal:</span>
          <span>₹<%= calculatedTotals.itemsTotal.toFixed(2) %></span>
        </div>
        <% if (calculatedTotals.discount > 0) { %>
        <div class="summary-row">
          <span>Discount:</span>
          <span class="text-success">-₹<%= calculatedTotals.discount.toFixed(2) %></span>
        </div>
        <% } %>
        <% if (calculatedTotals.couponDiscount > 0) { %>
        <div class="summary-row">
          <span>Coupon Discount:</span>
          <span class="text-success">-₹<%= calculatedTotals.couponDiscount.toFixed(2) %></span>
        </div>
        <% } %>
        <div class="summary-row">
          <span>Shipping:</span>
          <span><%= calculatedTotals.shippingCharge === 0 ? 'Free' : '₹' + calculatedTotals.shippingCharge.toFixed(2) %></span>
        </div>
        <div class="summary-row total">
          <span>Total:</span>
          <span>₹<%= calculatedTotals.grandTotal.toFixed(2) %></span>
        </div>
      </div>
      <% } %>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay">
    <div class="loading-content">
      <div class="spinner-border text-primary mb-3" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mb-0" id="loading-message">Processing your payment...</p>
      <small class="text-muted">Please do not close this window</small>
    </div>
  </div>
  
  <%- include('../partials/footer') %>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const paymentOptions = document.querySelectorAll('.payment-option:not(.disabled)')
      const retryBtn = document.getElementById('retryPaymentBtn')
      const loadingOverlay = document.getElementById('loading-overlay')
      const loadingMessage = document.getElementById('loading-message')
      let selectedPaymentMethod = null

      if (!loadingOverlay) {
        console.warn('Loading overlay element not found')
      }
      if (!loadingMessage) {
        console.warn('Loading message element not found')
      }
      if (!retryBtn) {
        console.warn('Retry button element not found')
        return
      }

      async function validateOrderStock(orderId) {
        try {
          const response = await fetch(`/order/check-stock/${orderId}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'same-origin'
          })

          const data = await response.json()

          if (!data.success) {
            await Swal.fire({
              title: 'Error',
              text: data.message || 'Failed to validate order stock',
              icon: 'error',
              confirmButtonText: 'OK',
              confirmButtonColor: '#1a1a1a'
            })
            return false
          }

          if (data.hasUnavailableProducts && data.unavailableProducts.length > 0) {
            let unavailableMessage = '<div class="unavailable-products">'
            unavailableMessage += '<p><strong>The following products are no longer available:</strong></p>'
            unavailableMessage += '<ul style="text-align: left; margin: 10px 0;">'

            data.unavailableProducts.forEach(item => {
              unavailableMessage += `<li><strong>${item.productName}</strong> (Size: ${item.size}) - ${item.reason}</li>`
            })

            unavailableMessage += '</ul>'
            unavailableMessage += '<p>Please contact support for assistance with this order.</p>'
            unavailableMessage += '</div>'

            await Swal.fire({
              title: 'Products Unavailable',
              html: unavailableMessage,
              icon: 'error',
              confirmButtonText: 'OK',
              confirmButtonColor: '#1a1a1a'
            })

            return false
          }

          if (data.hasStockIssues && data.stockIssues.length > 0) {
            let stockIssueMessage = '<div class="stock-issues">'
            stockIssueMessage += "<p><strong>Stock issues detected:</strong></p>"
            stockIssueMessage += '<ul style="text-align: left; margin: 10px 0;">'

            data.stockIssues.forEach((issue) => {
              if (issue.availableStock === 0) {
                stockIssueMessage += `<li><strong>${issue.productName}</strong> (Size: ${issue.size}) is <span style="color: #dc3545;">out of stock</span></li>`
              } else if (issue.isPartialStock) {
                stockIssueMessage += `<li><strong>${issue.productName}</strong> (Size: ${issue.size}) - Only ${issue.availableStock} available (order quantity: ${issue.requestedQuantity})</li>`
              }
            })

            stockIssueMessage += "</ul>"
            stockIssueMessage += "<p>Please contact support for assistance with this order.</p>"
            stockIssueMessage += "</div>"

            await Swal.fire({
              title: "Stock Issues Detected",
              html: stockIssueMessage,
              icon: "error",
              confirmButtonText: "OK",
              confirmButtonColor: "#1a1a1a"
            })

            return false
          }

          return true

        } catch (error) {
          console.error("Stock validation error:", error)
          await Swal.fire({
            title: "Error",
            text: "Failed to validate stock. Please try again.",
            icon: "error",
            confirmButtonText: "OK",
            confirmButtonColor: "#1a1a1a"
          })
          return false
        }
      }
      
      paymentOptions.forEach(option => {
        option.addEventListener('click', function() {
          paymentOptions.forEach(opt => opt.classList.remove('border-primary', 'bg-light'))

          this.classList.add('border-primary', 'bg-light')
          selectedPaymentMethod = this.dataset.method
          retryBtn.disabled = false
        })
      })
      
      retryBtn.addEventListener('click', async function() {
        if (!selectedPaymentMethod) {
          alert('Please select a payment method')
          return
        }

        try {
          if (loadingOverlay) {
            loadingOverlay.style.display = 'flex'
          }

          const stockValid = await validateOrderStock('<%= order._id %>')
          if (!stockValid) {
            if (loadingOverlay) {
              loadingOverlay.style.display = 'none'
            }
            return
          }

          const response = await fetch(`/order/retry-payment/<%= order._id %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              paymentMethod: selectedPaymentMethod
            })
          })
          
          const data = await response.json()
          
          if (data.success) {
            if (data.redirect) {
              window.location.href = data.redirect
            } else if (data.razorpayOrderId) {
              const options = {
                key: data.key,
                amount: data.amount,
                currency: data.currency,
                name: data.name,
                description: data.description,
                order_id: data.razorpayOrderId,
                prefill: data.prefill,
                theme: data.theme,
                handler: async function(response) {
                  try {
                    const verifyResponse = await fetch('/payment/razorpay/verify', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                        orderId: data.orderId
                      })
                    })
                    
                    const verifyData = await verifyResponse.json()
                    if (loadingOverlay) {
                      loadingOverlay.style.display = 'none'
                    }
                    
                    if (verifyData.success) {
                      window.location.href = verifyData.redirectUrl
                    } else {
                      window.location.reload()
                    }
                  } catch (error) {
                    if (loadingOverlay) {
                      loadingOverlay.style.display = 'none'
                    }
                    alert('Payment verification failed. Please try again.')
                  }
                },
                modal: {
                  ondismiss: function() {
                    if (loadingOverlay) {
                      loadingOverlay.style.display = 'none'
                    }
                  }
                }
              }
              
              const rzp = new Razorpay(options)
              rzp.on('payment.failed', function(response) {
                if (loadingOverlay) {
                  loadingOverlay.style.display = 'none'
                }
                fetch('/payment/razorpay/failure', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    error: response.error,
                    orderId: data.orderId
                  })
                }).then(() => {
                  window.location.reload()
                })
              })
              
              if (loadingOverlay) {
                loadingOverlay.style.display = 'none'
              }
              rzp.open()
            }
          } else {
            if (loadingOverlay) {
              loadingOverlay.style.display = 'none'
            }

            if (data.errorCode === 'STOCK_VALIDATION_FAILED') {
              if (data.hasUnavailableProducts && data.unavailableProducts.length > 0) {
                let unavailableMessage = '<div class="unavailable-products">'
                unavailableMessage += '<p><strong>The following products are no longer available:</strong></p>'
                unavailableMessage += '<ul style="text-align: left; margin: 10px 0;">'

                data.unavailableProducts.forEach(item => {
                  unavailableMessage += `<li><strong>${item.productName}</strong> (Size: ${item.size}) - ${item.reason}</li>`
                })

                unavailableMessage += '</ul>'
                unavailableMessage += '<p>Please contact support for assistance with this order.</p>'
                unavailableMessage += '</div>'

                Swal.fire({
                  title: 'Products Unavailable',
                  html: unavailableMessage,
                  icon: 'error',
                  confirmButtonText: 'OK',
                  confirmButtonColor: '#1a1a1a'
                })
              } else if (data.hasStockIssues && data.stockIssues.length > 0) {
                let stockIssueMessage = '<div class="stock-issues">'
                stockIssueMessage += "<p><strong>Stock issues detected:</strong></p>"
                stockIssueMessage += '<ul style="text-align: left; margin: 10px 0;">'

                data.stockIssues.forEach((issue) => {
                  if (issue.availableStock === 0) {
                    stockIssueMessage += `<li><strong>${issue.productName}</strong> (Size: ${issue.size}) is <span style="color: #dc3545;">out of stock</span></li>`
                  } else if (issue.isPartialStock) {
                    stockIssueMessage += `<li><strong>${issue.productName}</strong> (Size: ${issue.size}) - Only ${issue.availableStock} available (order quantity: ${issue.requestedQuantity})</li>`
                  }
                })

                stockIssueMessage += "</ul>"
                stockIssueMessage += "<p>Please contact support for assistance with this order.</p>"
                stockIssueMessage += "</div>"

                Swal.fire({
                  title: "Stock Issues Detected",
                  html: stockIssueMessage,
                  icon: "error",
                  confirmButtonText: "OK",
                  confirmButtonColor: "#1a1a1a"
                })
              }
            } else {
              alert(data.message || 'Failed to retry payment. Please try again.')
            }
          }
        } catch (error) {
          if (loadingOverlay) {
            loadingOverlay.style.display = 'none'
          }
          console.error('Error retrying payment:', error)
          alert('An error occurred. Please try again.')
        }
      })
    })
  </script>
</body>
</html>
